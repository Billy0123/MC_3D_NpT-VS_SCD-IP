#!/bin/bash
#SBATCH --job-name=HCHRecOPTMP
#SBATCH -p quick
#SBATCH --time=0-00:05:00
#SBATCH --mem-per-cpu=10M
#SBATCH --no-requeue
#SBATCH --output=output/OUT_HCH780_100_%j.txt
#SBATCH --error=output/ERR_HCH780_100_%j.txt

#UWAGA #1 !!! Pamietac o wyzerowaniu liczby krokow generatora liczb pseudolosowych (by niepotrzebnie nie czekac na to przy kazdym runie -> OPCJA W CONFIGU)

#$1-job_id jobu, ktory zawieral loadowany punkt, $2-N, $3-gaps, $4-growing, $5-pointNumber(from 0), $6-useSpecificDirectory (UWAGA: NIE 0), $7-ile razy powtorzyc wykonanie jobu?, $8-filterText, $9-T, $10-polydisperseDelta, $11-invPotPower


cd $SLURM_SUBMIT_DIR
#pressure do 3 miejsc po przecinku (zeby pasowalo do nazw plikow, lista DOMYSLNIE na G=1)
listLength=$(wc -l startArguments.txt | cut -f1 -d' ');
if [ $4 = 1 ]; then
   PRESSURE=$(cut -f2 startArguments.txt | head -n $(($5 + 1)) | tail -1);
else
   PRESSURE=$(cut -f2 startArguments.txt | head -n $((${listLength} - $5)) | tail -1);
fi

#UWAGA #2: SLURM nie tworzy indywidualnego folderu dla kazdego zadania (ponizej tworzony jest recznie)
mkdir $TMPDIR/lustre/mb1991/tmp_mb1991_$SLURM_JOB_ID
cd $TMPDIR/lustre/mb1991/tmp_mb1991_$SLURM_JOB_ID
pwd
echo "==============================="

cp $SLURM_SUBMIT_DIR/program .
cp $SLURM_SUBMIT_DIR/config.txt .
cp $SLURM_SUBMIT_DIR/startArguments.txt .
echo "files copied"
mkdir 3D_N-$2_gaps-$3_G-$4_badanie-$6_T-$9_pDD-${10}_iPP-${11}
cp $SLURM_SUBMIT_DIR/3D_N-$2_gaps-$3_G-$4_badanie-$6_T-$9_pDD-${10}_iPP-${11}/j-$1_Configurations_arg-${PRESSURE}.txt 3D_N-$2_gaps-$3_G-$4_badanie-$6_T-$9_pDD-${10}_iPP-${11} && {

   #UWAGA #3: Mozna do programu zadac jobID rowny np. 'repeats left' (lub 'none' gdy to zwykla rekurencja [a nie onePoint]). Wtedy w przypadku ewentualnej reanimacji powinno byc latwiej (bo: komenda 'sacct' [i podobne], czy nawet zapis w ERR [jezeli akurat powstanie - na co liczyc nie mozna] da co prawda informacje o jobID nieudanego jobu, jednak NIE DA informacji o jobID jobu 'poprzedniego' [z ktorego on korzystal i ktorego znajomosc potrzebna jest do reanimacji]) - nie bedzie trzeba go szukac po folderach indywidualnie dla kazdego reanimowanego jobu.
   time srun ./program 4 $SLURM_JOBID $1 $2 $3 $4 $5 1 $6 0 $9 ${10} ${11}

   cp -fr 3D_N-$2_gaps-$3_G-$4_badanie-$6_T-$9_pDD-${10}_iPP-${11} $SLURM_SUBMIT_DIR
   #UWAGA #4: SLURM nie kasuje po sobie tempa automatycznie
   rm -r $TMPDIR/lustre/mb1991/tmp_mb1991_$SLURM_JOB_ID

   if [ $(($7 - 1)) -gt 0 ]; then 
   cd $SLURM_SUBMIT_DIR
   sbatch --job-name=$8G$4B$6P$5R$(($7 - 1)) --output=output/OUT_HC$2_gaps-$3_G-$4_B-$6_P-$5_R-$(($7 - 1))_T-$9_pDD-${10}_iPP-${11}_%j.txt --error=output/ERR_HC$2_gaps-$3_G-$4_B-$6_P-$5_R-$(($7 - 1))_T-$9_pDD-${10}_iPP-${11}_%j.txt sbatchTMPRecursionOnePoint $SLURM_JOBID $2 $3 $4 $5 $6 $(($7 - 1)) $8 $9 ${10} ${11};
   fi
} || {
   echo "Missing configuration file (previous job failed) or actual job failed at any step. Stopping recursion.";
}

exit 0
